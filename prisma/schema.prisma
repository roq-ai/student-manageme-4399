generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model course {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  school_id   String   @db.Uuid
  teacher_id  String   @db.Uuid
  name        String?  @db.VarChar(255)
  description String?  @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  school      school   @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teacher     teacher  @relation(fields: [teacher_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model parent {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String   @db.Uuid
  student_id     String   @db.Uuid
  relation       String?  @db.VarChar(255)
  contact_number String?  @db.VarChar(15)
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  student        student  @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model school {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?   @db.VarChar(255)
  name        String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user_id     String    @db.Uuid
  tenant_id   String    @db.VarChar(255)
  course      course[]
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student     student[]
  teacher     teacher[]
}

model student {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String    @db.Uuid
  school_id       String    @db.Uuid
  grade           Int?
  enrollment_date DateTime? @db.Timestamp(6)
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  updated_at      DateTime  @default(now()) @db.Timestamp(6)
  parent          parent[]
  school          school    @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model teacher {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  school_id  String    @db.Uuid
  subject    String?   @db.VarChar(255)
  hire_date  DateTime? @db.Timestamp(6)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  course     course[]
  school     school    @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String    @unique @db.VarChar(255)
  firstName   String?   @db.VarChar(255)
  lastName    String?   @db.VarChar(255)
  roq_user_id String    @db.VarChar(255)
  tenant_id   String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  parent      parent[]
  school      school[]
  student     student[]
  teacher     teacher[]
}
